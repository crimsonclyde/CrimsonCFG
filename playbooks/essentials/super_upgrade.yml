# CrimsonCFG-Name: Super Upgrade Function
# CrimsonCFG-Description: Ultimate one-stop-shop for updates - all at once magic: apt/snaps!
# CrimsonCFG-Essential: true
# CrimsonCFG-Required: false
# CrimsonCFG-Essential-Order: 6
---
- name: Add Super Upgrade Function
  hosts: all
  become: true
  vars:
    super_upgrade_log_dir: /var/log/CrimsonCFG/super-upgrade
  vars_files:
    - "{{ lookup('env', 'HOME') + '/.config/com.crimson.cfg/local.yml' }}"

  tasks:

    #######################
    # Create log directory and set permissions
    #######################

    - name: Create log directory for super-upgrade
      ansible.builtin.file:
        path: "{{ super_upgrade_log_dir }}"
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Set log directory permissions to allow user write access
      ansible.builtin.file:
        path: "{{ super_upgrade_log_dir }}"
        mode: '0775'
        owner: root
        group: "{{ user }}"

    #######################
    # Create Wazuh monitoring directory and timestamp file
    #######################

    - name: Create Wazuh monitoring directory
      ansible.builtin.file:
        path: /var/log/CrimsonCFG
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Create initial system update timestamp file for Wazuh
      ansible.builtin.copy:
        dest: /var/log/CrimsonCFG/system-last-updated
        content: "{{ ansible_date_time.iso8601 }}"
        mode: '0644'
        owner: root
        group: root

    #######################
    # Configure logrotate for super-upgrade logs
    #######################

    - name: Create logrotate configuration for super-upgrade
      ansible.builtin.copy:
        dest: /etc/logrotate.d/super-upgrade
        content: |
          {{ super_upgrade_log_dir }}/*.log {
              daily
              rotate 30
              compress
              delaycompress
              missingok
              notifempty
              create 644 root root
              postrotate
                  # Optional: You can add post-rotation commands here
                  # echo "Log rotated at $(date)" >> {{ super_upgrade_log_dir }}/rotation.log
              endscript
          }
        mode: '0644'
        owner: root
        group: root

    #######################
    # Check which shell config file to use
    #######################

    - name: Check if .zshrc exists
      ansible.builtin.stat:
        path: "{{ user_home }}/.zshrc"
      register: zshrc_exists

    - name: Set shell config file path
      ansible.builtin.set_fact:
        shell_config_file: "{{ user_home }}/.zshrc"
      when: zshrc_exists.stat.exists

    - name: Set shell config file path to .bashrc if .zshrc doesn't exist
      ansible.builtin.set_fact:
        shell_config_file: "{{ user_home }}/.bashrc"
      when: not zshrc_exists.stat.exists

    #######################
    # Add super-upgrade function to appropriate shell config
    #######################

    - name: Check if super-upgrade function already exists in shell config
      ansible.builtin.shell: grep -q "super-upgrade()" "{{ shell_config_file }}"
      register: super_upgrade_exists
      failed_when: false
      changed_when: false

    - name: Add super-upgrade function to shell config
      become: false
      ansible.builtin.lineinfile:
        path: "{{ shell_config_file }}"
        line: |
          super-upgrade() {
            # Clear the screen
            clear

            # Log directory in system location
            LOG_DIR="{{ super_upgrade_log_dir }}"
            mkdir -p "$LOG_DIR"

            # Log file name with timestamp
            LOG_FILE="$LOG_DIR/$(date '+%Y-%m-%d_%H-%M-%S').log"

            {
              echo "##############################"
              echo "# 🔄 SUPER-UPGRADE"
              echo "#"
              echo "# Started at $(date)"
              echo "# Kernel version: $(uname -r)"
              echo "# User: $USER"
              echo "# Hostname: $(hostname)"
              echo "##############################"
            } | sudo tee "$LOG_FILE"

            {
              echo "##############################"
              echo "# 🔄 Updating APT packages..."
              echo "##############################"
              sudo apt-get update
              sudo apt-get full-upgrade -y
              sudo apt-get autoremove -y
              sudo apt-get clean

              echo "##############################"
              echo "# 🔄 Checking for Flatpak..."
              echo "##############################"
              if command -v flatpak >/dev/null 2>&1; then
                echo "Flatpak is installed. Updating Flatpak packages..."
                flatpak update -y
              else
                echo "Flatpak is not installed. Skipping Flatpak updates."
              fi

              echo "##############################"
              echo "# 🔄 Checking for Snap..."
              echo "##############################"
              if command -v snap >/dev/null 2>&1; then
                echo "Snap is installed. Updating Snap packages..."
                sudo snap refresh
              else
                echo "Snap is not installed. Skipping Snap updates."
              fi

              echo "##############################"
              echo "# ✅ System fully updated at $(date)!"
              echo "##############################"

              # Create timestamp file for Wazuh monitoring
              echo "$(date '+%Y-%m-%d %H:%M:%S')" | sudo tee /var/log/CrimsonCFG/system-last-updated > /dev/null

              if [ -f /var/run/reboot-required ]; then
                echo "##############################"
                echo "# ⚠️  Reboot is required!"
                echo "##############################"
              fi
            } | sudo tee -a "$LOG_FILE"

            # Log rotation is now handled by logrotate
            # Clean up old logs (keep last 10 files as backup)
            ls -1t "$LOG_DIR"/*.log 2>/dev/null | tail -n +11 | xargs -r sudo rm -f
          }
        insertafter: EOF
        state: present
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: '0644'
      when: super_upgrade_exists.rc != 0

    - name: Display success message for .zshrc
      ansible.builtin.debug:
        msg: "Super-upgrade function has been added to .zshrc. Use 'super-upgrade' command in your terminal. Logs are now stored in {{ super_upgrade_log_dir }}/"
      when: super_upgrade_exists.rc != 0 and zshrc_exists.stat.exists

    - name: Display success message for .bashrc
      ansible.builtin.debug:
        msg: "Super-upgrade function has been added to .bashrc. Use 'super-upgrade' command in your terminal. Logs are now stored in {{ super_upgrade_log_dir }}/"
      when: super_upgrade_exists.rc != 0 and not zshrc_exists.stat.exists
