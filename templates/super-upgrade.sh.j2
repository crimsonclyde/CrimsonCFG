#!/bin/bash
# CrimsonCFG Super Upgrade Script
# This script provides a comprehensive system update function
# Generated by CrimsonCFG - {{ ansible_date_time.iso8601 }}

super-upgrade() {
  # Clear the screen
  clear

  # Log directory in system location
  LOG_DIR="{{ super_upgrade_log_dir }}"
  mkdir -p "$LOG_DIR"

  # Log file name with timestamp
  LOG_FILE="$LOG_DIR/$(date '+%Y-%m-%d_%H-%M-%S').log"

  {
    echo "##############################"
    echo "# 🔄 SUPER-UPGRADE"
    echo "#"
    echo "# Started at $(date)"
    echo "# Kernel version: $(uname -r)"
    echo "# User: $USER"
    echo "# Hostname: $(hostname)"
    echo "##############################"
  } | sudo tee "$LOG_FILE"

  {
    echo "##############################"
    echo "# 🔄 Updating APT packages..."
    echo "##############################"
    sudo apt-get update
    sudo apt-get full-upgrade -y
    sudo apt-get autoremove -y
    sudo apt-get clean

    echo "##############################"
    echo "# 🔄 Checking for Flatpak..."
    echo "##############################"
    if command -v flatpak >/dev/null 2>&1; then
      echo "Flatpak is installed. Updating Flatpak packages..."
      flatpak update -y
    else
      echo "Flatpak is not installed. Skipping Flatpak updates."
    fi

    echo "##############################"
    echo "# 🔄 Checking for Snap..."
    echo "##############################"
    if command -v snap >/dev/null 2>&1; then
      echo "Snap is installed. Updating Snap packages..."
      sudo snap refresh
    else
      echo "Snap is not installed. Skipping Snap updates."
    fi

    echo "##############################"
    echo "# ✅ System fully updated at $(date)!"
    echo "##############################"

    # Create timestamp file for Wazuh monitoring
    echo "$(date '+%Y-%m-%d %H:%M:%S')" | sudo tee /var/log/CrimsonCFG/system-last-updated > /dev/null

    if [ -f /var/run/reboot-required ]; then
      echo "##############################"
      echo "# ⚠️  Reboot is required!"
      echo "##############################"
    fi
  } | sudo tee -a "$LOG_FILE"

  # Log rotation is now handled by logrotate
  # Clean up old logs (keep last 10 files as backup)
  ls -1t "$LOG_DIR"/*.log 2>/dev/null | tail -n +11 | xargs -r sudo rm -f
}
